import pandas as pd
import numpy as np

def slice_dataframe(df: pd.DataFrame, freeze_param: str, value: float) -> pd.DataFrame:
    """
    Extract a slice from a multidimensional (meshgrid-flattened) DataFrame
    by fixing one parameter at a specified value.

    This reduces an N-dimensional parameter sweep (stored as a flattened DataFrame)
    to an (Nâ€“1)-dimensional slice by holding one variable constant and allowing
    all others to vary. The function:
      1) collects unique grid values for `freeze_param`,
      2) applies a small fractional offset (+0.1%) to `value` to improve matching
         in the presence of floating-point rounding,
      3) computes a tolerance equal to half the minimum positive grid spacing,
      4) selects rows where `freeze_param` is close to `value` within that tolerance.

    Parameters
    ----------
    df : pandas.DataFrame
        Full meshgrid-flattened DataFrame (all parameter combinations).
    freeze_param : str
        Column name (parameter) to hold fixed.
    value : float
        Target value for the frozen parameter (in the same units as the column).

    Returns
    -------
    pandas.DataFrame
        Subset of `df` where `freeze_param` equals (within tolerance) the requested value.
        The result has its index reset.

    Notes
    -----
    - The 0.1% delta (1e-3) helps robustly match values generated by `np.linspace`
      and similar functions in the face of tiny binary rounding differences.
    - The tolerance assumes a fairly regular grid spacing.

    Examples
    --------
    >>> sliced = slice_dataframe(df, 'li6_prop', 0.25)
    >>> sliced.shape
    """
    u = np.unique(df[freeze_param])
    delta = 1.0e-3
    value = float(value) * (1.0 + delta)
    tol = 0.5 * float(np.min(np.diff(u))) if len(u) > 1 else 1.0e-12
    sliced = df[np.isclose(df[freeze_param], value, atol=tol, rtol=0.0)].reset_index(drop=True)
    return sliced
